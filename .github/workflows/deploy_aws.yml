name: Deploy to Amazon ECS
on:
  pull_request:
    branches: [ master ]

jobs:
 deploy:
  name: Deploy
  runs-on: ubuntu-latest
  steps:
  - name: Checkout
    uses: actions/checkout@v1

  - name: Set up Python python-version
    uses: actions/setup-python@v1
    with:
      python-version: 3.9

  - name: Set up QEMU
    uses: docker/setup-qemu-action@v1

  - name: Set up Docker Buildx
    uses: docker/setup-buildx-action@v1

  - name: create docker cache
    uses: actions/cache@v1
    with:
      path: ${{ github.workspace }}/cache
      key: ${{ runner.os }}-docker-${{ hashfiles('cache/**') }}
      restore-keys: |
        ${{ runner.os }}-docker-

  - name: Create .env/
    run: mkdir .env

  - name: Create .env_dev
    run: |
      touch .env/.env_dev
      echo FLASK_ENV=development >> .env/.env_dev
      echo FLASK_CONFIG=development >> .env/.env_dev
      echo DATABASE_URL=sqlite:///db.sqlite >> .env/.env_dev
      echo CELERY_BROKER_URL=pyamqp://rabbitmq:5672 >> .env/.env_dev
      echo CELERY_RESULT_BACKEND=rpc://rabbitmq:5672 >> .env/.env_dev

  - name: Create .env_apis
    run: |
      touch .env/.env_apis
      echo TWITTER_CONSUMER_KEY=${{ secrets.TWITTER_CONSUMER_KEY }} >> .env/.env_apis
      echo TWITTER_CONSUMER_SECRET=${{ secrets.TWITTER_CONSUMER_SECRET }} >> .env/.env_apis
      echo ETHPLORER_KEY=${{ secrets.ETHPLORER_KEY }} >> .env/.env_apis

  - name: Create .env_mail_secrets
    run: |
      touch .env/.env_mail_secrets
      echo MAIL_SERVER=${{ secrets.MAIL_SERVER }} >> .env/.env_mail_secrets
      echo MAIL_PORT=${{ secrets.MAIL_PORT }} >> .env/.env_mail_secrets
      echo MAIL_USE_SSL=${{ secrets.MAIL_USE_SSL }} >> .env/.env_mail_secrets
      echo MAIL_USERNAME=${{ secrets.MAIL_USERNAME }} >> .env/.env_mail_secrets
      echo MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }} >> .env/.env_mail_secrets


  - name: Upload .env_dev to s3
    uses: zdurham/s3-upload-github-action@master
    with:
      args: --acl public-read
    env:
      FILE: .env/.env_dev
      AWS_REGION: 'us-east-2'
      S3_BUCKET: s3-trendr-bucket
      S3_KEY: trendr-dev.env
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  - name: Upload .env_apis to s3
    uses: zdurham/s3-upload-github-action@master
    with:
      args: --acl public-read
    env:
      FILE: .env/.env_apis
      AWS_REGION: 'us-east-2'
      S3_BUCKET: s3-trendr-bucket
      S3_KEY: trendr-apis.env
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  - name: Upload .env_mail_secrets to s3
    uses: zdurham/s3-upload-github-action@master
    with:
      args: --acl public-read
    env:
      FILE: .env/.env_mail_secrets
      AWS_REGION: 'us-east-2'
      S3_BUCKET: s3-trendr-bucket
      S3_KEY: trendr-mail.env
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  - name: Configure AWS credentials
    uses: aws-actions/configure-aws-credentials@v1
    with:
      aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      aws-region: us-east-2

#  - name: Login to Amazon ECR
#    id: login-ecr
#    uses: aws-actions/amazon-ecr-login@v1
#
#  - name: Build, tag, and push the frontend image to Amazon ECR
#    id: build-frontend-image
#    working-directory: react-frontend
#    env:
#      ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#      ECR_REPOSITORY: ecs-trendr-repository
#      IMAGE_TAG: frontend-image-${{ github.sha }}
#    run: |
#      docker buildx build -f Dockerfile --cache-from "type=local,src=$GITHUB_WORKSPACE/cache" --cache-to "type=local,dest=$GITHUB_WORKSPACE/cache" --output "type=image, name=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG,push=true" .
#      echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
#
#  - name: Build, tag, and push the backend image to Amazon ECR
#    id: build-backend-image
#    env:
#      ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#      ECR_REPOSITORY: ecs-trendr-repository
#      IMAGE_TAG: backend-image-${{ github.sha }}
#    run: |
#      docker buildx build -f ./compose/local/flask/Dockerfile --cache-from "type=local,src=$GITHUB_WORKSPACE/cache" --cache-to "type=local,dest=$GITHUB_WORKSPACE/cache" --output "type=image, name=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG,push=true" .
#      echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
#
#  - name: Render task definition of the client container
#    id: render-client-container
#    uses: aws-actions/amazon-ecs-render-task-definition@v1
#    with:
#      task-definition: ./aws/task-definition.json
#      container-name: client
#      image: ${{ steps.build-frontend-image.outputs.image }}
#
#  - name: Render task definition of the api container
#    id: render-api-container
#    uses: aws-actions/amazon-ecs-render-task-definition@v1
#    with:
#      task-definition: ${{ steps.render-client-container.outputs.task-definition }}
#      container-name: api
#      image: ${{ steps.build-backend-image.outputs.image }}
#
#  - name: Render task definition of the celery_beat container
#    id: render-celery-beat-container
#    uses: aws-actions/amazon-ecs-render-task-definition@v1
#    with:
#      task-definition: ${{ steps.render-api-container.outputs.task-definition }}
#      container-name: celery_beat
#      image: ${{ steps.build-backend-image.outputs.image }}
#
#  - name: Render task definition of the celery_worker_general container
#    id: render-celery-worker-general-container
#    uses: aws-actions/amazon-ecs-render-task-definition@v1
#    with:
#      task-definition: ${{ steps.render-celery-beat-container.outputs.task-definition }}
#      container-name: celery_worker_general
#      image: ${{ steps.build-backend-image.outputs.image }}
#
#  - name: Render task definition of the celery_worker_social container
#    id: render-celery-worker-social-container
#    uses: aws-actions/amazon-ecs-render-task-definition@v1
#    with:
#      task-definition: ${{ steps.render-celery-worker-general-container.outputs.task-definition }}
#      container-name: celery_worker_social
#      image: ${{ steps.build-backend-image.outputs.image }}
#
#  - name: Render task definition of the celery_worker_sentiment container
#    id: render-celery-worker-sentiment-container
#    uses: aws-actions/amazon-ecs-render-task-definition@v1
#    with:
#      task-definition: ${{ steps.render-celery-worker-social-container.outputs.task-definition }}
#      container-name: celery_worker_sentiment
#      image: ${{ steps.build-backend-image.outputs.image }}
#
#  - name: Render task definition of the flower container
#    id: render-flower-container
#    uses: aws-actions/amazon-ecs-render-task-definition@v1
#    with:
#      task-definition: ${{ steps.render-celery-worker-sentiment-container.outputs.task-definition }}
#      container-name: flower
#      image: ${{ steps.build-backend-image.outputs.image }}

  - name: Render task definition of the rabbitmq container
    id: render-rabbitmq-container
    uses: aws-actions/amazon-ecs-render-task-definition@v1
    with:
      task-definition: ./aws/task-definition.json
      container-name: rabbitmq
      image: rabbitmq

  - name: Deploy Amazon ECS task definition
    uses: aws-actions/amazon-ecs-deploy-task-definition@v1
    with:
      task-definition: ${{ steps.render-rabbitmq-container.outputs.task-definition }}
      service: ecs-trendr-service
      cluster: ecs-trendr-cluster
      wait-for-service-stability: false